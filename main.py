#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Sending_CV - Sistema Integrado de An√°lise ATS e Envio de Curr√≠culos
===================================================================

DESCRI√á√ÉO GERAL:
Sistema completo para an√°lise de curr√≠culos usando tecnologia ATS (Applicant Tracking System)
e envio automatizado de emails para empresas, com integra√ß√£o inteligente entre an√°lise e envio.

MODOS DE FUNCIONAMENTO:

1. MODO AN√ÅLISE (python main.py analise):
   - An√°lise ATS completa de curr√≠culos
   - Compara√ß√£o com vagas dispon√≠veis
   - Gera√ß√£o de relat√≥rios de compatibilidade
   - Recomenda√ß√µes de otimiza√ß√£o

2. MODO ENVIO (python main.py envio):
   - An√°lise ATS pr√©-envio
   - Filtragem autom√°tica (‚â•70% de pontua√ß√£o)
   - Envio de emails apenas para curr√≠culos aprovados
   - Registro de pontua√ß√µes no log

3. MODO PADR√ÉO (python main.py):
   - An√°lise ATS b√°sica
   - Sem envio de emails

L√ìGICA DE FUNCIONAMENTO:

1. DETEC√á√ÉO E CONVERS√ÉO DE ARQUIVOS:
   - Detecta automaticamente arquivos .txt, .docx e .pdf nas pastas curriculos/ e vagas/
   - Converte .docx para .txt usando python-docx
   - Converte .pdf para .txt usando pdfplumber
   - Salva vers√µes .txt para processamento futuro

2. AN√ÅLISE DE TEXTO E TOKENIZA√á√ÉO:
   - Remove acentos e caracteres especiais
   - Converte para min√∫sculas
   - Remove stopwords (palavras comuns: de, a, e, o, etc.)
   - Separa o texto em palavras relevantes (tokens)

3. C√ÅLCULO DE FREQU√äNCIA E PONTUA√á√ÉO:
   - Conta frequ√™ncia relativa de cada palavra em curr√≠culos e vagas
   - Calcula similaridade baseada na presen√ßa de palavras-chave
   - Pontua√ß√£o = m√©dia das presen√ßas das palavras-chave da vaga no curr√≠culo
   - Meta: atingir ‚â•70% de pontua√ß√£o para aprova√ß√£o no modo envio

4. INTEGRA√á√ÉO COM ENVIO DE EMAILS:
   - No modo envio: s√≥ envia emails para curr√≠culos com ‚â•70%
   - Registra pontua√ß√£o ATS na planilha de log
   - Anexa vers√£o otimizada do curr√≠culo
   - Personaliza mensagem com status ATS

5. GERA√á√ÉO DE RECOMENDA√á√ïES:
   - Identifica palavras-chave faltantes
   - Sugere adi√ß√µes ao curr√≠culo
   - Salva vers√£o ajustada do curr√≠culo quando necess√°rio

FORMATOS SUPORTADOS:
- .txt: Texto plano (processamento direto)
- .docx: Documentos Word (convers√£o autom√°tica)
- .pdf: Documentos PDF (convers√£o autom√°tica)

METODOLOGIA ATS:
- An√°lise baseada em frequ√™ncia de termos
- Foco em palavras-chave t√©cnicas e comportamentais
- Compara√ß√£o quantitativa e qualitativa
- Recomenda√ß√µes personalizadas por candidato

EXEMPLO DE SA√çDA:
==================================================
Analisando vaga: analista_dados.txt
Curr√≠culo: joao_silva.docx (convertido de .docx)
Pontua√ß√£o ATS: 85.2%
Pontuacao acima do minimo (70.0%). Email enviado!

==================================================

COMANDOS DISPON√çVEIS:
python main.py              # An√°lise b√°sica
python main.py analise      # An√°lise completa
python main.py organizado   # Sistema organizado por vaga
python main.py envio        # An√°lise + envio integrado

Autor: Cara Core Inform√°tica
Data: 2025
Licen√ßa: MIT
"""

from core import ats_analyzer
from core import ats_email_integration
from core import ats_organizer
import sys

def main():
    print("Sistema ATS - Cara Core Informatica")
    print("=" * 50)

    if len(sys.argv) > 1:
        modo = sys.argv[1].lower()

        if modo == "analise":
            print("MODO: Analise ATS apenas")
            print("Analisando curriculos e vagas...\n")
            ats_analyzer.main()

        elif modo == "organizado":
            print("MODO: Sistema Organizado por Vaga")
            print("Analisando estrutura organizada de vagas...\n")
            organizer = ats_organizer.ATSOrganizer()
            organizer.executar_analise_organizada()
            organizer.gerar_relatorios_por_vaga()
            organizer.exportar_resultados_csv()

        elif modo == "envio":
            print("MODO: Analise ATS + Envio de Emails")
            print("Executando analise e envio integrado...\n")
            integracao = ats_email_integration.ATSEmailIntegration()
            integracao.executar_fluxo_completo()

        else:
            print("‚ùå Modo n√£o reconhecido. Use:")
            print("   python main.py analise      # Analise basica")
            print("   python main.py organizado   # Sistema organizado por vaga")
            print("   python main.py envio        # Analise + envio integrado")
            return
    else:
        print("üîç MODO PADR√ÉO: An√°lise ATS apenas")
        print("Analisando curr√≠culos e vagas...")
        print("Arquivos .docx e .pdf ser√£o automaticamente convertidos para .txt\n")

        ats_analyzer.main()

    print("\n" + "=" * 50)
    print("Processo concluido!")
    print("Verifique se a pontuacao ATS atingiu 70% ou mais.")
    print("Siga as recomendacoes para otimizar seu curriculo.")

if __name__ == "__main__":
    main()
